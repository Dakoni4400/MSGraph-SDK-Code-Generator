<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseJavaModel.template.tt"#>
<#@ output extension="\\" #>
<#host.TemplateName = c.TypeCollectionWithReferencesRequest();#>
<#=writer.WriteHeader()#>
<#=host.CreatePackageDef()#>

<# var importNamespace = host.CurrentModel.GetNamespace().AddPrefix(); #>
import <#=importNamespace#>.options.QueryOption;
import <#=importNamespace#>.core.IBaseClient;
import <#=importNamespace#>.http.BaseCollectionRequest;
import <#=importNamespace#>.concurrency.IExecutors;

<#=TypeHelperJava.CreateClassDef(c.TypeCollectionWithReferencesRequest(), "BaseCollectionRequest" + c.CollectionRequestGeneric(), c.ITypeCollectionWithReferencesRequest())#>

    /**
     * The request builder for this collection of <#=c.TypeName()#>
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public <#=c.TypeCollectionWithReferencesRequest()#>(final String requestUrl, <#=TypeHelperJava.IBaseClientType()#> client, final java.util.List<? extends <#=importNamespace#>.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, <#=c.TypeCollectionResponse()#>.class, <#=c.ITypeCollectionPage()#>.class);
    }

    public void get(final ICallback<? super <#=c.ITypeCollectionWithReferencesPage()#>> callback) {
        final IExecutors executors = getBaseRequest().getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    executors.performOnForeground(get(), callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public <#=c.ITypeCollectionWithReferencesPage()#> get() throws ClientException {
        final <#=c.TypeCollectionResponse()#> response = send();
        return buildFromResponse(response);
    }

<# if (c.GetFeatures().CanExpand) { #>
    public <#=c.ITypeCollectionRequest()#> expand(final String value) {
        addQueryOption(new com.microsoft.graph.options.QueryOption("$expand", value));
        return (<#=c.TypeCollectionRequest()#>)this;
    }

<# } #>
<# if (c.GetFeatures().CanFilter) { #>
    public <#=c.ITypeCollectionRequest()#> filter(final String value) {
        addQueryOption(new com.microsoft.graph.options.QueryOption("$filter", value));
        return (<#=c.TypeCollectionRequest()#>)this;
    }

<# } #>
<# if (c.GetFeatures().CanSort) { #>
    public <#=c.ITypeCollectionRequest()#> orderBy(final String value) {
        addQueryOption(new com.microsoft.graph.options.QueryOption("$orderby", value));
        return (<#=c.TypeCollectionRequest()#>)this;
    }

<# } #>
<# if (c.GetFeatures().CanSelect) { #>
    public <#=c.ITypeCollectionRequest()#> select(final String value) {
        addQueryOption(new com.microsoft.graph.options.QueryOption("$select", value));
        return (<#=c.TypeCollectionRequest()#>)this;
    }

<# } #>
<# if (c.GetFeatures().CanUseTop) { #>
    public <#=c.ITypeCollectionRequest()#> top(final int value) {
        addQueryOption(new com.microsoft.graph.options.QueryOption("$top", value + ""));
        return (<#=c.TypeCollectionRequest()#>)this;
    }

<# } #>
    public <#=c.ITypeCollectionWithReferencesPage()#> buildFromResponse(final <#=c.TypeCollectionResponse()#> response) {
        final <#=c.ITypeCollectionRequestBuilder()#> builder;
        if (response.nextLink != null) {
            builder = new <#=c.TypeCollectionRequestBuilder()#>(response.nextLink, getBaseRequest().getClient(), /* options */ null);
        } else {
            builder = null;
        }
        final <#=c.TypeCollectionWithReferencesPage()#> page = new <#=c.TypeCollectionWithReferencesPage()#>(response, builder);
        page.setRawObject(response.getSerializer(), response.getRawObject());
        return page;
    }
}
