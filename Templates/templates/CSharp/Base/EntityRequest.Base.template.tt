<# // Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information. #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="Request.Base.template.tt"#>
<#+

// -------------------------------------------------------------
// Methods for initializing requests and classes for entities that support $ref addressing
// -------------------------------------------------------------
public string GetEntityReferenceRequestClassDefinition(OdcmClass odcmClass)
{
    return this.GetClassDefinition(this.GetEntityReferenceRequestName(odcmClass), odcmClass.GetNamespaceName());
}

public string GetEntityWithReferenceRequestClassDefinition(OdcmClass odcmClass)
{
    return this.GetClassDefinition(this.GetEntityWithReferenceRequestName(odcmClass), odcmClass.GetNamespaceName());
}

public string GetEntityReferenceRequestConstructor(OdcmClass odcmClass)
{
    return this.GetConstructor(this.GetEntityReferenceRequestName(odcmClass), odcmClass.GetNamespaceName());
}

public string GetEntityWithReferenceRequestConstructor(OdcmClass odcmClass)
{
    return this.GetConstructor(this.GetEntityWithReferenceRequestName(odcmClass), odcmClass.GetNamespaceName());
}

// -------------------------------------------------------------
// Methods for standard entity requests
// -------------------------------------------------------------
public string GetEntityRequestClassDefinition(OdcmClass odcmClass)
{
    return this.GetClassDefinition(this.GetEntityRequestName(odcmClass), odcmClass.GetNamespaceName());
}

public string GetEntityRequestConstructor(OdcmClass odcmClass)
{
    return this.GetConstructor(this.GetEntityRequestName(odcmClass), odcmClass.GetNamespaceName());
}


// -------------------------------------------------------------
// Build CRUD methods
// -------------------------------------------------------------
public void AppendDeleteAsyncHeader(string deleteTargetString, StringBuilder stringBuilder, bool includeSendParams, bool isGraphResponseMethod)
{
    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("        /// Deletes the specified {0} and returns a <see cref=\"GraphResponse\"/> object.", deleteTargetString);
    }
    else
    {
        stringBuilder.AppendFormat("        /// Deletes the specified {0}.", deleteTargetString);
    }
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");

    if (includeSendParams)
    {
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> for the request.</param>");
    }

    stringBuilder.Append(Environment.NewLine);
    if (isGraphResponseMethod)
    {
        stringBuilder.Append("        /// <returns>The task of <see cref=\"GraphResponse\"/> to await.</returns>");
    }
    else
    {
        stringBuilder.Append("        /// <returns>The task to await.</returns>");
    }
    
}

public string GetDeleteAsyncMethod(string deleteTargetString, string deleteTargetType, bool isGraphResponseMethod)
{
    var stringBuilder = new StringBuilder();

	if (deleteTargetType.EndsWith("Request"))
	{
		deleteTargetType = String.Concat(deleteTargetType, "Object");
	}

    var templateWriterHost = (CustomT4Host)Host;
    var templateWriter = (CodeWriterCSharp)templateWriterHost.CodeWriter;
    this.AppendDeleteAsyncHeader(deleteTargetString, stringBuilder, true, isGraphResponseMethod);
    stringBuilder.Append(Environment.NewLine);

    if (isGraphResponseMethod)
    {
        stringBuilder.Append("        public System.Threading.Tasks.Task<GraphResponse> DeleteResponseAsync(CancellationToken cancellationToken = default)");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        {");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("            this.Method = {0};", templateWriter.DeleteMethod);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("            return this.SendAsyncWithGraphResponse(null, cancellationToken);");
    }
    else
    {
        stringBuilder.Append("        public async System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken = default)");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        {");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("            this.Method = {0};", templateWriter.DeleteMethod);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("            await this.SendAsync<{0}>(null, cancellationToken).ConfigureAwait(false);", deleteTargetType);
    }

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        }");

    return stringBuilder.ToString();
}

public string GetEntityDeleteAsyncMethod(OdcmClass odcmClass, bool isGraphResponseMethod = false)
{
    var entityName = this.GetEntityNameString(odcmClass);
    return this.GetDeleteAsyncMethod(entityName, entityName, isGraphResponseMethod);
}

public void AppendPutAsyncHeader(string putTargetString, string lowerCaseEntityName, StringBuilder stringBuilder, bool includeSendParams, bool isGraphResponseMethod)
{
    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("        /// Updates the specified {0} using PUT and returns a <see cref=\"GraphResponse{{{0}}}\"/> object.", putTargetString);
    }
    else
    {
        stringBuilder.AppendFormat("        /// Updates the specified {0} using PUT.", putTargetString);
    }
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <param name=\"{0}ToUpdate\">The {1} object to update.</param>", lowerCaseEntityName, putTargetString);

    if (includeSendParams)
    {
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> for the request.</param>");
    }

    stringBuilder.Append(Environment.NewLine);
    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("        /// <returns>The task to await of <see cref=\"GraphResponse{{{0}}}\"/>.</returns>", putTargetString);
    }
    else
    {
        stringBuilder.Append("        /// <returns>The task to await.</returns>");
    }
}

public string GetEntityPutAsyncMethod(OdcmClass odcmClass,bool initializeCollectionProperties, bool isGraphResponseMethod = false)
{
    var stringBuilder = new StringBuilder();
    var templateWriterHost = (CustomT4Host)Host;
    var templateWriter = (CodeWriterCSharp)templateWriterHost.CodeWriter;
    var entityName = this.GetEntityNameString(odcmClass);

    // Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
    if (entityName.EndsWith("Request"))
    {
        entityName = String.Concat(entityName, "Object");
    }

    var lowerCaseEntityName = entityName.ToLowerFirstChar();
    this.AppendPutAsyncHeader(entityName, lowerCaseEntityName, stringBuilder, true, isGraphResponseMethod);
    stringBuilder.Append(Environment.NewLine);
    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("        public System.Threading.Tasks.Task<GraphResponse<{0}>> PutResponseAsync({0} {1}ToUpdate, CancellationToken cancellationToken = default)", entityName, lowerCaseEntityName);
    }
    else
    {
        stringBuilder.AppendFormat("        public async System.Threading.Tasks.Task<{0}> PutAsync({0} {1}ToUpdate, CancellationToken cancellationToken = default)", entityName, lowerCaseEntityName);
    }

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        {");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            this.ContentType = {0};", templateWriter.JsonContentType);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            this.Method = {0};",templateWriter.PutMethod);
    stringBuilder.Append(Environment.NewLine);
    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("            return this.SendAsyncWithGraphResponse<{0}>({1}ToUpdate, cancellationToken);", entityName, lowerCaseEntityName);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        }");
    }
    else
    {
        stringBuilder.AppendFormat("            var updatedEntity = await this.SendAsync<{0}>({1}ToUpdate, cancellationToken).ConfigureAwait(false);", entityName, lowerCaseEntityName);
        stringBuilder.Append(Environment.NewLine);
        if (initializeCollectionProperties) {
            stringBuilder.Append(@"            this.InitializeCollectionProperties(updatedEntity);");
            stringBuilder.Append(Environment.NewLine);
        }
        stringBuilder.Append(@"            return updatedEntity;
        }");
    }

    return stringBuilder.ToString();
}

public void AppendPutRefenceAsyncHeader(string putTargetString, StringBuilder stringBuilder, bool includeSendParams, bool isGraphResponseMethod)
{
    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("        /// Puts the specified {0} reference and returns <see cref=\"GraphResponse\"/> object.", putTargetString);
    }
    else
    {
        stringBuilder.AppendFormat("        /// Puts the specified {0} reference.", putTargetString);
    }
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <param name=\"id\">The {0} reference to update.</param>", putTargetString);

    if (includeSendParams)
    {
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> for the request.</param>");
    }

    stringBuilder.Append(Environment.NewLine);
    if (isGraphResponseMethod)
    {
        stringBuilder.Append("        /// <returns>The task to await of <see cref=\"GraphResponse\"/>.</returns>");
    }
    else
    {
        stringBuilder.Append("        /// <returns>The task to await.</returns>");
    }
}

public string GetEntityReferencePutAsyncMethod(OdcmClass odcmClass, bool isGraphResponseMethod = false)
{
    var entityName = this.GetEntityNameString(odcmClass);

    var templateWriterHost = (CustomT4Host)Host;
    var templateWriter = (CodeWriterCSharp)templateWriterHost.CodeWriter;
    var stringBuilder = new StringBuilder();
    this.AppendPutRefenceAsyncHeader(entityName, stringBuilder, true, isGraphResponseMethod);
    stringBuilder.Append(Environment.NewLine);

    if (isGraphResponseMethod)
    {
        stringBuilder.Append("        public System.Threading.Tasks.Task<GraphResponse> PutResponseAsync(string id, CancellationToken cancellationToken = default)");
    }
    else
    {
        stringBuilder.Append("        public System.Threading.Tasks.Task PutAsync(string id, CancellationToken cancellationToken = default)");
    }

    stringBuilder.Append(@"
        {");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            this.Method = {0};", templateWriter.PutMethod);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            this.ContentType = {0};", templateWriter.JsonContentType);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(@"            var referenceRequestBody = new ReferenceRequestBody()");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(@"            {");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(@"                ODataId = string.Format(@""{0}/users/{1}"", this.Client.BaseUrl, id)");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append(@"            };");
    stringBuilder.Append(Environment.NewLine);


    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("            return this.SendAsyncWithGraphResponse(referenceRequestBody, cancellationToken);");
    }
    else
    {
        stringBuilder.AppendFormat("            return this.SendAsync(referenceRequestBody, cancellationToken);");
    }
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        }");

    return stringBuilder.ToString();
}

public void AppendCreateAsyncHeader(string entityName, string lowerCaseEntityName, StringBuilder stringBuilder, bool includeSendParams, bool isGraphResponseMethod)
{
    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    if (isGraphResponseMethod)
    {
            stringBuilder.AppendFormat("        /// Creates the specified {0} using POST and returns a <see cref=\"GraphResponse{{{0}}}\"/> object.", entityName);
    }
    else
    {
            stringBuilder.AppendFormat("        /// Creates the specified {0} using POST.", entityName);
    }
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <param name=\"{0}ToCreate\">The {1} to create.</param>", lowerCaseEntityName, entityName);


    if (includeSendParams)
    {
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> for the request.</param>");
    }

    stringBuilder.Append(Environment.NewLine);
    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("        /// <returns>The <see cref=\"GraphResponse{{{0}}}\"/> object of the request.</returns>", entityName);
    }
    else
    {
        stringBuilder.AppendFormat("        /// <returns>The created {0}.</returns>", entityName);
    }
}

public string GetEntityCreateAsyncMethod(OdcmClass odcmClass, bool initializeCollectionProperties = true, bool isGraphResponseMethod = false)
{
    var stringBuilder = new StringBuilder();

    var templateWriterHost = (CustomT4Host)Host;
    var templateWriter = (CodeWriterCSharp)templateWriterHost.CodeWriter;

    var entityName = this.GetEntityNameString(odcmClass);

	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (entityName.EndsWith("Request"))
	{
		entityName = String.Concat(entityName, "Object");
	}

    var lowerCaseEntityName = entityName.ToLowerFirstChar();
    this.AppendCreateAsyncHeader(entityName, lowerCaseEntityName, stringBuilder, true, isGraphResponseMethod);
    stringBuilder.Append(Environment.NewLine);
    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("        public System.Threading.Tasks.Task<GraphResponse<{0}>> CreateResponseAsync({0} {1}ToCreate, CancellationToken cancellationToken = default)", entityName, lowerCaseEntityName);
    }
    else
    {
        stringBuilder.AppendFormat("        public async System.Threading.Tasks.Task<{0}> CreateAsync({0} {1}ToCreate, CancellationToken cancellationToken = default)", entityName, lowerCaseEntityName);
    }

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        {");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            this.ContentType = {0};", templateWriter.JsonContentType);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            this.Method = {0};",templateWriter.PostMethod);
    stringBuilder.Append(Environment.NewLine);
    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("            return this.SendAsyncWithGraphResponse<{0}>({1}ToCreate, cancellationToken);", entityName, lowerCaseEntityName);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        }");
    }
    else
    {
        stringBuilder.AppendFormat("            var newEntity = await this.SendAsync<{0}>({1}ToCreate, cancellationToken).ConfigureAwait(false);", entityName, lowerCaseEntityName);
        stringBuilder.Append(Environment.NewLine);
        if (initializeCollectionProperties) {
            stringBuilder.Append(@"            this.InitializeCollectionProperties(newEntity);");
            stringBuilder.Append(Environment.NewLine);
        }
        stringBuilder.Append(@"            return newEntity;
        }");
    }

    return stringBuilder.ToString();
}

public void AppendGetAsyncHeader(string entityName, StringBuilder stringBuilder, bool includeSendParams, bool isGraphResponseMethod)
{

	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (entityName.EndsWith("Request"))
	{
		entityName = String.Concat(entityName, "Object");
	}

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);

    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("        /// Gets the specified {0} and returns a <see cref=\"GraphResponse{{{0}}}\"/> object.", entityName);
    }
    else
    {
        stringBuilder.AppendFormat("        /// Gets the specified {0}.", entityName);
    }

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");


    if (includeSendParams)
    {
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> for the request.</param>");
    }

    stringBuilder.Append(Environment.NewLine);

    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("        /// <returns>The <see cref=\"GraphResponse{{{0}}}\"/> object of the request.</returns>", entityName);
    }
    else
    {
        stringBuilder.AppendFormat("        /// <returns>The {0}.</returns>", entityName);
    }
}

public string GetEntityGetAsyncMethod(OdcmClass odcmClass, bool initializeCollectionProperties = true, bool isGraphResponseMethod = false)
{
    var stringBuilder = new StringBuilder();

    var entityName = this.GetEntityNameString(odcmClass);

	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (entityName.EndsWith("Request"))
	{
		entityName = String.Concat(entityName, "Object");
	}

    var templateWriterHost = (CustomT4Host)Host;
    var templateWriter = (CodeWriterCSharp)templateWriterHost.CodeWriter;
    this.AppendGetAsyncHeader(entityName, stringBuilder, true, isGraphResponseMethod);
    stringBuilder.Append(Environment.NewLine);

    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("        public System.Threading.Tasks.Task<GraphResponse<{0}>> GetResponseAsync(CancellationToken cancellationToken = default)", entityName);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        {");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("            this.Method = {0};", templateWriter.GetMethod);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("            return this.SendAsyncWithGraphResponse<{0}>(null, cancellationToken);", entityName);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        }");
    }
    else
    {
        stringBuilder.AppendFormat("        public async System.Threading.Tasks.Task<{0}> GetAsync(CancellationToken cancellationToken = default)", entityName);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        {");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("            this.Method = {0};", templateWriter.GetMethod);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("            var retrievedEntity = await this.SendAsync<{0}>(null, cancellationToken).ConfigureAwait(false);", entityName);

        if (initializeCollectionProperties)
        {
            stringBuilder.Append(@"
            this.InitializeCollectionProperties(retrievedEntity);");
        }

        stringBuilder.Append(@"
            return retrievedEntity;
        }");
    }

    return stringBuilder.ToString();
}

public void AppendUpdateAsyncHeader(string entityName, string lowerCaseEntityName, string @namespace, StringBuilder stringBuilder, bool includeSendParams, bool isGraphResponseMethod)
{
    var clientExceptionTypeName = @namespace.GetCoreLibraryType("ClientException");

	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (entityName.EndsWith("Request"))
	{
		entityName = String.Concat(entityName, "Object");
	}

    stringBuilder.Append("/// <summary>");
    stringBuilder.Append(Environment.NewLine);
    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("        /// Updates the specified {0} using PATCH and returns a <see cref=\"GraphResponse{{{0}}}\"/> object.", entityName);
    }
    else
    {
        stringBuilder.AppendFormat("        /// Updates the specified {0} using PATCH.", entityName);
    }

    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        /// </summary>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        /// <param name=\"{0}ToUpdate\">The {1} to update.</param>", lowerCaseEntityName, entityName);

    if (includeSendParams)
    {
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        /// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> for the request.</param>");
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.AppendFormat("        /// <exception cref=\"{0}\">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>", clientExceptionTypeName);
	}

    stringBuilder.Append(Environment.NewLine);
    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("        /// <returns>The <see cref=\"GraphResponse{{{0}}}\"/> object of the request.</returns>", entityName);
    }
    else
    {
        stringBuilder.AppendFormat("        /// <returns>The updated {0}.</returns>", entityName);
    }
    
}

public string GetEntityUpdateAsyncMethod(OdcmClass odcmClass, bool initializeCollectionProperties = true, bool isGraphResponseMethod = false)
{
    var stringBuilder = new StringBuilder();
    var @namespace = odcmClass.GetNamespaceName();
    var clientExceptionTypeName = @namespace.GetCoreLibraryType("ClientException");
    var errorTypeName = @namespace.GetCoreLibraryType("Error");
    var generatedErrorConstantsTypeName = @namespace.GetCoreLibraryType("GeneratedErrorConstants");
    var constantsTypeName = @namespace.GetCoreLibraryType("Constants");

    var entityName = this.GetEntityNameString(odcmClass);

	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (entityName.EndsWith("Request"))
	{
		entityName = String.Concat(entityName, "Object");
	}

    var lowerCaseEntityName = entityName.ToLowerFirstChar();

    var templateWriterHost = (CustomT4Host)Host;
    var templateWriter = (CodeWriterCSharp)templateWriterHost.CodeWriter;

    this.AppendUpdateAsyncHeader(entityName, lowerCaseEntityName, @namespace, stringBuilder, true, isGraphResponseMethod);
    stringBuilder.Append(Environment.NewLine);
    if (isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("        public System.Threading.Tasks.Task<GraphResponse<{0}>> UpdateResponseAsync({0} {1}ToUpdate, CancellationToken cancellationToken = default)", entityName, lowerCaseEntityName);
    }
    else
    {
        stringBuilder.AppendFormat("        public async System.Threading.Tasks.Task<{0}> UpdateAsync({0} {1}ToUpdate, CancellationToken cancellationToken = default)", entityName, lowerCaseEntityName);
    }
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.Append("        {");
	stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            this.ContentType = {0};", templateWriter.JsonContentType);
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("            this.Method = {0};",templateWriter.PatchMethod);
    stringBuilder.Append(Environment.NewLine);
    if(isGraphResponseMethod)
    {
        stringBuilder.AppendFormat("            return this.SendAsyncWithGraphResponse<{0}>({1}ToUpdate, cancellationToken);", entityName, lowerCaseEntityName);
        stringBuilder.Append(Environment.NewLine);
        stringBuilder.Append("        }");
    }
    else
    {
        stringBuilder.AppendFormat("            var updatedEntity = await this.SendAsync<{0}>({1}ToUpdate, cancellationToken).ConfigureAwait(false);", entityName, lowerCaseEntityName);
        stringBuilder.Append(Environment.NewLine);
        if (initializeCollectionProperties)
        {
            stringBuilder.Append(@"            this.InitializeCollectionProperties(updatedEntity);");
            stringBuilder.Append(Environment.NewLine);
        }
        stringBuilder.Append(@"            return updatedEntity;
        }");
    }

    return stringBuilder.ToString();
}

public string GetEntityReferenceDeleteAsyncMethod(OdcmClass odcmClass, bool isGraphResponseMethod = false)
{
    var entityName = this.GetEntityNameString(odcmClass);
    return this.GetDeleteAsyncMethod(string.Concat(entityName, " reference"), entityName, isGraphResponseMethod);
}


// -------------------------------------------------------------
// Build select and expand methods
// -------------------------------------------------------------
public string GetSelectMethod(string requestType, string @namespace)
{
    var queryOptionTypeName = @namespace.GetCoreLibraryType("QueryOption");
    var stringBuilder = new StringBuilder();

    stringBuilder.Append(
      @"/// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name=""value"">The select value.</param>
        /// <returns>The request object to send.</returns>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public I{0} Select(string value)", requestType);
    stringBuilder.Append(@"
        {
            this.QueryOptions.Add(new ");
    stringBuilder.Append(queryOptionTypeName);
    stringBuilder.Append(@"(""$select"", value));
            return this;
        }");

    return stringBuilder.ToString();
}

public string GetSelectExpressionMethod(string requestType, string @namespace, string underlyingType)
{
    var expressionExtractHelperTypeName = @namespace.GetCoreLibraryType("ExpressionExtractHelper");
    var queryOptionTypeName = @namespace.GetCoreLibraryType("QueryOption");

	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (underlyingType.EndsWith("Request"))
	{
		underlyingType = String.Concat(underlyingType, "Object");
	}

    var stringBuilder = new StringBuilder();

    stringBuilder.Append(
      @"/// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name=""selectExpression"">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public I{0} Select(Expression<Func<{1}, object>> selectExpression)", requestType, underlyingType);
    stringBuilder.Append(@"
        {
            if (selectExpression == null)
            {
                throw new ArgumentNullException(nameof(selectExpression));
            }
            string error;
            string value = ");
    stringBuilder.Append(expressionExtractHelperTypeName);
    stringBuilder.Append(@".ExtractMembers(selectExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(selectExpression));
            }
            else
            {
                this.QueryOptions.Add(new ");
    stringBuilder.Append(queryOptionTypeName);
    stringBuilder.Append(@"(""$select"", value));
            }
            return this;
        }");

    return stringBuilder.ToString();
}

public string GetExpandExpressionMethod(string requestType, string underlyingType, string @namespace)
{
    var expressionExtractHelperTypeName = @namespace.GetCoreLibraryType("ExpressionExtractHelper");
    var queryOptionTypeName = @namespace.GetCoreLibraryType("QueryOption");

	// Special case for when an entity name ends with "Request". Associated with the change in EntityType.cs.tt
	if (underlyingType.EndsWith("Request"))
	{
		underlyingType = String.Concat(underlyingType, "Object");
	}

    var stringBuilder = new StringBuilder();

    stringBuilder.Append(
      @"/// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name=""expandExpression"">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public I{0} Expand(Expression<Func<{1}, object>> expandExpression)", requestType, underlyingType);
    stringBuilder.Append(@"
        {
		    if (expandExpression == null)
            {
                throw new ArgumentNullException(nameof(expandExpression));
            }
            string error;
            string value = ");
    stringBuilder.Append(expressionExtractHelperTypeName);
    stringBuilder.Append(@".ExtractMembers(expandExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(expandExpression));
            }
            else
            {
                this.QueryOptions.Add(new ");
    stringBuilder.Append(queryOptionTypeName);
    stringBuilder.Append(@"(""$expand"", value));
            }
            return this;
        }");

    return stringBuilder.ToString();
}

public string GetExpandMethod(string requestType, string @namespace)
{
    var stringBuilder = new StringBuilder();
    var queryOptionTypeName = @namespace.GetCoreLibraryType("QueryOption");

    stringBuilder.Append(
      @"/// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name=""value"">The expand value.</param>
        /// <returns>The request object to send.</returns>");
    stringBuilder.Append(Environment.NewLine);
    stringBuilder.AppendFormat("        public I{0} Expand(string value)", requestType);
    stringBuilder.Append(@"
        {
            this.QueryOptions.Add(new ");
    stringBuilder.Append(queryOptionTypeName);
    stringBuilder.Append(@"(""$expand"", value));
            return this;
        }");

    return stringBuilder.ToString();
}

// Standard entity
public string GetEntityExpandMethods(OdcmClass odcmClass)
{
    string entityName = this.GetEntityNameString(odcmClass);
    string @namespace = odcmClass.GetNamespaceName();
    return this.GetExpandMethod(this.GetRequestString(entityName), @namespace) +
    Environment.NewLine + Environment.NewLine + "        " +
    this.GetExpandExpressionMethod(this.GetRequestString(entityName), entityName, @namespace);
}

public string GetEntitySelectMethods(OdcmClass odcmClass)
{
    string entityName = this.GetEntityNameString(odcmClass);
    var @namespace = odcmClass.GetNamespaceName();
    return this.GetSelectMethod(this.GetRequestString(entityName), @namespace) +
    Environment.NewLine + Environment.NewLine + "        " +
    this.GetSelectExpressionMethod(this.GetRequestString(entityName), @namespace, entityName);
}

// Entity with references
public string GetEntityWithReferenceExpandMethods(OdcmClass odcmClass)
{
	string entityWithReferenceRequestName = this.GetEntityWithReferenceRequestName(odcmClass);
    var @namespace = odcmClass.GetNamespaceName();
    return this.GetExpandMethod(entityWithReferenceRequestName, @namespace) +
    Environment.NewLine + Environment.NewLine + "        " +
    this.GetExpandExpressionMethod(entityWithReferenceRequestName, this.GetEntityNameString(odcmClass), @namespace);
}

public string GetEntityWithReferenceSelectMethods(OdcmClass odcmClass)
{
	string entityWithReferenceRequestName = this.GetEntityWithReferenceRequestName(odcmClass);
    var @namespace = odcmClass.GetNamespaceName();
    return this.GetSelectMethod(this.GetEntityWithReferenceRequestName(odcmClass), @namespace) +
    Environment.NewLine + Environment.NewLine + "        " +
    this.GetSelectExpressionMethod(entityWithReferenceRequestName, @namespace, this.GetEntityNameString(odcmClass));
}

#>
